Q1: What is Matplotlib? Why is it used? Name five plots that can be plotted using the Pyplot module of
Matplotlib.
Answer:
Matplotlib is a 2D plotting library for the Python programming language. It enables the creation of static, animated, and interactive visualizations in Python. Matplotlib is widely used for data visualization and is built on NumPy arrays and Python.
Why is it used:
Matplotlib is used for various purposes in data science, scientific research, and visualization tasks. Some of its main use cases include:
1. Data Visualization: Matplotlib provides a convenient way to visualize data, making it easier to understand patterns, trends, and relationships.
2. Publication-Quality Plots: Matplotlib allows the creation of high-quality, publication-ready plots, suitable for academic papers, reports, and presentations.
3. Interactive Plots: It supports interactive plotting, making it useful for exploring data and dynamically adjusting visualizations.
4. Embedding in Applications: Matplotlib can be embedded into graphical user interface (GUI) applications, making it suitable for developing interactive applications.
5. It is compatible with various operating systems and integrates well with other libraries and tools in the Python ecosystem.
Five plots that can be plotted using the Pyplot module of Matplotlib:
The `pyplot` module in Matplotlib provides a simple interface for creating various types of plots. Here are five common types of plots that can be created using the `pyplot` module:
1. Line Plot:
   - `plt.plot(x, y)`
2. Scatter Plot:
   - `plt.scatter(x, y)`
3. Histogram:
   - `plt.hist(data, bins)`
4. Bar Plot:
   - `plt.bar(x, height)
5. Pie Chart:
   - `plt.pie(sizes, labels)`

Q2: What is a scatter plot? Use the following code to generate data for x and y. Using this generated data
plot a scatter plot.
import numpy as np
np.random.seed(3)
x = 3 + np.random.normal(0, 2, 50)
y = 3 + np.random.normal(0, 2, len(x))
Note: Also add title, xlabel, and ylabel to the plot.

answer:
A scatter plot is a type of plot that displays individual data points on a two-dimensional graph. Each point on the graph represents an
observation in the dataset, with the x and y coordinates corresponding to two variables. Scatter plots are useful for visualizing the 
relationship between two continuous variables, identifying patterns, and detecting outliers.
Here's the code to generate a scatter plot using the provided data:

Program:
import numpy as np
import matplotlib.pyplot as plt

# Generate data for x and y
np.random.seed(3)
x = 3 + np.random.normal(0, 2, 50)
y = 3 + np.random.normal(0, 2, len(x))

# Create a scatter plot
plt.scatter(x, y)

# Add title, xlabel, and ylabel
plt.title('Scatter Plot')
plt.xlabel('X-axis')
plt.ylabel('Y-axis')

# Show the plot
plt.show()
```


Q3: Why is the subplot() function used? Draw four line plots using the subplot() function.
Use the following data:
import numpy as np
For line 1: x = np.array([0, 1, 2, 3, 4, 5]) and y = np.array([0, 100, 200, 300, 400, 500])
For line 2: x = np.array([0, 1, 2, 3, 4, 5]) and y = np.array([50, 20, 40, 20, 60, 70])
For line 3: x = np.array([0, 1, 2, 3, 4, 5]) and y = np.array([10, 20, 30, 40, 50, 60])
For line 4: x = np.array([0, 1, 2, 3, 4, 5]) and y = np.array([200, 350, 250, 550, 450, 150])

Answer:
import numpy as np
import matplotlib.pyplot as plt

# Data for four lines
x = np.array([0, 1, 2, 3, 4, 5])

y1 = np.array([0, 100, 200, 300, 400, 500])
y2 = np.array([50, 20, 40, 20, 60, 70])
y3 = np.array([10, 20, 30, 40, 50, 60])
y4 = np.array([200, 350, 250, 550, 450, 150])

# Create subplots
plt.subplot(2, 2, 1)  # 2 rows, 2 columns, subplot 1
plt.plot(x, y1)
plt.title('Line 1')

plt.subplot(2, 2, 2)  # 2 rows, 2 columns, subplot 2
plt.plot(x, y2)
plt.title('Line 2')

plt.subplot(2, 2, 3)  # 2 rows, 2 columns, subplot 3
plt.plot(x, y3)
plt.title('Line 3')

plt.subplot(2, 2, 4)  # 2 rows, 2 columns, subplot 4
plt.plot(x, y4)
plt.title('Line 4')

# Adjust layout for better spacing
plt.tight_layout()

# Show the plots
plt.show()

Q4: What is a bar plot? Why is it used? Using the following data plot a bar plot and a horizontal bar plot.
import numpy as np
company = np.array(["Apple", "Microsoft", "Google", "AMD"])
profit = np.array([3000, 8000, 1000, 10000])

Answer:
import numpy as np
import matplotlib.pyplot as plt

company = np.array(["Apple", "Microsoft", "Google", "AMD"])
profit = np.array([3000, 8000, 1000, 10000])

# Bar Plot
plt.bar(company, profit, color='skyblue')
plt.title('Bar Plot - Company Profits')
plt.xlabel('Company')
plt.ylabel('Profit (in billions)')
plt.show()

# Horizontal Bar Plot
plt.barh(company, profit, color='lightcoral')
plt.title('Horizontal Bar Plot - Company Profits')
plt.xlabel('Profit (in billions)')
plt.ylabel('Company')
plt.show()

Q5: What is a box plot? Why is it used? Using the following data plot a box plot.
box1 = np.random.normal(100, 10, 200)
box2 = np.random.normal(90, 20, 200)

answer:
import numpy as np
import matplotlib.pyplot as plt

box1 = np.random.normal(100, 10, 200)
box2 = np.random.normal(90, 20, 200)

# Combine the data into a list
data = [box1, box2]

# Create a box plot
plt.boxplot(data, labels=['Box 1', 'Box 2'])
plt.title('Box Plot')
plt.xlabel('Box')
plt.ylabel('Values')

# Show the plot
plt.show()


