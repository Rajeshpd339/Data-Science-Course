Consider following code to answer further questions:
import pandas as pd
course_name = [‘Data Science’, ‘Machine Learning’, ‘Big Data’, ‘Data Engineer’]
duration = [2,3,6,4]
df = pd.DataFrame(data = {‘course_name’ : course_name, ‘duration’ : duration})
Q1. Write a code to print the data present in the second row of the dataframe, df.

ans:

import pandas as pd

course_name = ['Data Science', 'Machine Learning', 'Big Data', 'Data Engineer']
duration = [2, 3, 6, 4]

df = pd.DataFrame(data={'course_name': course_name, 'duration': duration})

# Print data present in the second row
second_row_data = df.iloc[1]
print(second_row_data)


Q2. What is the difference between the functions loc and iloc in pandas.DataFrame?
ans:
loc (Label-based Indexing):

Syntax: df.loc[row_label, col_label]
Usage:
It uses labels or boolean arrays to select data.
The row and column indices are specified by labels.
It includes the last element when using slicing.
Example:
# Selecting data using loc
df.loc[1, 'course_name']  # Selects the value in the 'course_name' column at index 1
df.loc[1:3, 'course_name']  # Selects rows 1 to 3 in the 'course_name' column

iloc (Integer-based Indexing):

Syntax: df.iloc[row_index, col_index]
Usage:
It uses integer indices or boolean arrays to select data.
The row and column indices are specified by integers.
It excludes the last element when using slicing (similar to Python indexing convention).
Example:
# Selecting data using iloc
df.iloc[1, 0]  # Selects the value in the first column at index 1
df.iloc[1:3, 0]  # Selects rows 1 to 2 in the first column

Q3. Reindex the given dataframe using a variable, reindex = [3,0,1,2] and store it in the variable, new_df
then find the output for both new_df.loc[2] and new_df.iloc[2].
Did you observe any difference in both the outputs? If so then explain it.
Consider the below code to answer further questions:
import pandas as pd
import numpy as np
columns = ['column_1', 'column_2', 'column_3', 'column_4', 'column_5', 'column_6']
indices = [1,2,3,4,5,6]
#Creating a dataframe:
df1 = pd.DataFrame(np.random.rand(6,6), columns = columns, index = indices)
ans:
import pandas as pd
import numpy as np

columns = ['column_1', 'column_2', 'column_3', 'column_4', 'column_5', 'column_6']
indices = [1, 2, 3, 4, 5, 6]

# Creating a DataFrame
df1 = pd.DataFrame(np.random.rand(6, 6), columns=columns, index=indices)

# Reindexing using the variable reindex = [3, 0, 1, 2]
reindex = [3, 0, 1, 2]
new_df = df1.reindex(reindex)

# Output for new_df.loc[2]
output_loc = new_df.loc[2]

# Output for new_df.iloc[2]
output_iloc = new_df.iloc[2]

# Displaying the outputs
print("Output for new_df.loc[2]:\n", output_loc)
print("\nOutput for new_df.iloc[2]:\n", output_iloc)

Q4. Write a code to find the following statistical measurements for the above dataframe df1:
(i) mean of each and every column present in the dataframe.
(ii) standard deviation of column, ‘column_2’
ans:
import pandas as pd
import numpy as np

columns = ['column_1', 'column_2', 'column_3', 'column_4', 'column_5', 'column_6']
indices = [1, 2, 3, 4, 5, 6]

# Creating a DataFrame
df1 = pd.DataFrame(np.random.rand(6, 6), columns=columns, index=indices)

# (i) Mean of each column
mean_of_each_column = df1.mean()
print("Mean of each column:\n", mean_of_each_column)

# (ii) Standard deviation of column 'column_2'
std_dev_column_2 = df1['column_2'].std()
print("\nStandard deviation of 'column_2':", std_dev_column_2)

Q5. Replace the data present in the second row of column, ‘column_2’ by a string variable then find the
mean of column, column_2.
If you are getting errors in executing it then explain why.
[Hint: To replace the data use df1.loc[] and equate this to string data of your choice.]
Ans:
import pandas as pd
import numpy as np

columns = ['column_1', 'column_2', 'column_3', 'column_4', 'column_5', 'column_6']
indices = [1, 2, 3, 4, 5, 6]

# Creating a DataFrame
df1 = pd.DataFrame(np.random.rand(6, 6), columns=columns, index=indices)

# Replace the data in the second row of 'column_2' with a string variable
df1.loc[2, 'column_2'] = 'string_data'

# Display the DataFrame after replacement
print("DataFrame after replacement:\n", df1)

# Try to find the mean of 'column_2'
try:
    mean_column_2 = df1['column_2'].mean()
    print("\nMean of 'column_2':", mean_column_2)
except Exception as e:
    print("\nError:", e)

Q6. What do you understand about the windows function in pandas and list the types of windows
functions?

Ans:


Q7. Write a code to print only the current month and year at the time of answering this question.
[Hint: Use pandas.datetime function]
Ans:
import pandas as pd

# Get the current date
current_date = pd.to_datetime('today')

# Extract the month and year
current_month = current_date.month
current_year = current_date.year

# Print the current month and year
print("Current Month:", current_month)
print("Current Year:", current_year)

Q8. Write a Python program that takes in two dates as input (in the format YYYY-MM-DD) and
calculates the difference between them in days, hours, and minutes using Pandas time delta. The
program should prompt the user to enter the dates and display the result.

Ans:
import pandas as pd

# Function to calculate the difference between two dates
def calculate_time_difference(start_date, end_date):
    # Convert input strings to datetime objects
    start_datetime = pd.to_datetime(start_date)
    end_datetime = pd.to_datetime(end_date)

    # Calculate time delta
    time_difference = end_datetime - start_datetime

    # Extract days, hours, and minutes
    days_difference = time_difference.days
    hours_difference, remainder = divmod(time_difference.seconds, 3600)
    minutes_difference = remainder // 60

    return days_difference, hours_difference, minutes_difference

# Get user input for two dates
start_date_input = input("Enter the start date (YYYY-MM-DD): ")
end_date_input = input("Enter the end date (YYYY-MM-DD): ")

# Calculate time difference
days, hours, minutes = calculate_time_difference(start_date_input, end_date_input)

# Display the result
print("\nTime Difference:")
print(f"Days: {days} days")
print(f"Hours: {hours} hours")
print(f"Minutes: {minutes} minutes")
